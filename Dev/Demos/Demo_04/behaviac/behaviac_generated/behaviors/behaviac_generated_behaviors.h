// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_GENERATED_BEHAVIORS_H_
#define _BEHAVIAC_GENERATED_BEHAVIORS_H_

#include "../types/behaviac_types.h"

namespace behaviac
{
	// Source file: subtree_task

	class Task_bt_subtree_task_node0 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_subtree_task_node0, Task);
		Task_bt_subtree_task_node0()
		{
			this->m_task = AgentMeta::ParseMethod("Self.FirstAgent::event_task(0)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Condition_bt_subtree_task_node2 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_subtree_task_node2, Condition);
		Condition_bt_subtree_task_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& opl = (int&)pAgent->GetVariable<int >(2009726548u);
			int opr = 2;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_subtree_task_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_subtree_task_node3, Action);
		Action_bt_subtree_task_node3()
		{
			method_p0 = (char*)("Hello subtree!");
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FirstAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_FirstAgent_Say, void, behaviac::string >(method_p0);
			return BT_SUCCESS;
		}
		behaviac::string method_p0;
	};

	class bt_subtree_task
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("subtree_task");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("FirstAgent");
#endif
			// locals
			pBT->AddLocal("FirstAgent", "int", "_$local_task_param_$_0", "0");
			// children
			{
				Task_bt_subtree_task_node0* node0 = BEHAVIAC_NEW Task_bt_subtree_task_node0;
				node0->SetClassNameString("Task");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("FirstAgent");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("FirstAgent");
#endif
					node0->AddChild(node1);
					{
						Condition_bt_subtree_task_node2* node2 = BEHAVIAC_NEW Condition_bt_subtree_task_node2;
						node2->SetClassNameString("Condition");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("FirstAgent");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					{
						Action_bt_subtree_task_node3* node3 = BEHAVIAC_NEW Action_bt_subtree_task_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("FirstAgent");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: maintree_task

	class Event_bt_maintree_task_attach5 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_maintree_task_attach5, Event);
		Event_bt_maintree_task_attach5()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = AgentMeta::ParseMethod(eventName, this->m_eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Action_bt_maintree_task_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_maintree_task_node1, Action);
		Action_bt_maintree_task_node1()
		{
			method_p0 = (char*)("Wait subtree ...");
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FirstAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_FirstAgent_Say, void, behaviac::string >(method_p0);
			return BT_RUNNING;
		}
		behaviac::string method_p0;
	};

	class Assignment_bt_maintree_task_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_maintree_task_node2, Assignment);
		Assignment_bt_maintree_task_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 1;
			((FirstAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_FirstAgent_p1, int >() = opr;
			return result;
		}
	};

	class Condition_bt_maintree_task_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_maintree_task_node3, Condition);
		Condition_bt_maintree_task_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((FirstAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_FirstAgent_p1, int >();
			int opr = 1;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_maintree_task_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_maintree_task_node4, Action);
		Action_bt_maintree_task_node4()
		{
			method_p0 = (char*)("Hello maintree!");
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FirstAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_FirstAgent_Say, void, behaviac::string >(method_p0);
			return BT_SUCCESS;
		}
		behaviac::string method_p0;
	};

	class bt_maintree_task
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("maintree_task");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("FirstAgent");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("FirstAgent");
#endif
				// attachments
				{
					Event_bt_maintree_task_attach5* attach5 = BEHAVIAC_NEW Event_bt_maintree_task_attach5;
					attach5->SetClassNameString("Event");
					attach5->SetId(5);
#if !BEHAVIAC_RELEASE
					attach5->SetAgentType("FirstAgent");
#endif
					attach5->Initialize("Self.FirstAgent::event_task(0)", "subtree_task", TM_Transfer, false);
					node0->Attach(attach5, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach5) != 0));
				}
				pBT->AddChild(node0);
				{
					Action_bt_maintree_task_node1* node1 = BEHAVIAC_NEW Action_bt_maintree_task_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("FirstAgent");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_maintree_task_node2* node2 = BEHAVIAC_NEW Assignment_bt_maintree_task_node2;
					node2->SetClassNameString("Assignment");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("FirstAgent");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Condition_bt_maintree_task_node3* node3 = BEHAVIAC_NEW Condition_bt_maintree_task_node3;
					node3->SetClassNameString("Condition");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("FirstAgent");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_maintree_task_node4* node4 = BEHAVIAC_NEW Action_bt_maintree_task_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("FirstAgent");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

}
#endif // _BEHAVIAC_GENERATED_BEHAVIORS_H_
